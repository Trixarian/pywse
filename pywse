#!/usr/bin/env python
# ====================
#     PyWSE v0.6     |
#    By Trixar_za    |
# Released under CC0 |
# ====================
import os
import sys
import random
import gtk
import gobject
import webkit
import fileinput
from threading import Thread
import BaseHTTPServer
from SimpleHTTPServer import SimpleHTTPRequestHandler

gobject.threads_init()

def read_settings(key):
	value = None
	file = open("settings.ini")
	for line in file.readlines():
		if "#" not in line:
			data = line.split("=")[0].strip()
			if key.lower() in data.lower():
				value = line.split("=")[1].strip()
				break
	file.close()
	return value

def write_settings(key, value):
	for line in fileinput.input("settings.ini",inplace=1):
		data = line.split("=")[0].strip()
		if key.lower() in data.lower():
			print data+" = "+value
		else: print line.strip()

global base_mode
base_mode = "no"
if (len(sys.argv) > 1):
	if sys.argv[1] == "--base":
		base_mode = "yes"

# WebServer with Ranged HEAD and GET responses
# Thanks to James Shubin, Xyne and Sean Goller for the base work!
class RequestHandler(SimpleHTTPRequestHandler):
	def __init__(self,req,client_addr,server):
		SimpleHTTPRequestHandler.__init__(self,req,client_addr,server)

	def do_GET(self):
		f, start_range, end_range = self.send_head()
		if f:
			f.seek(start_range, 0)
			chunk = 0x1000
			total = 0
			while chunk > 0:
				if start_range + chunk > end_range:
					chunk = end_range - start_range
				try:
					self.wfile.write(f.read(chunk))
				except:
					break
				total += chunk
				start_range += chunk
			f.close()

	def send_head(self):
		path = self.translate_path(self.path)
		f = None
		if os.path.isdir(path):
			if not self.path.endswith('/'):
				self.send_response(301)
				self.send_header("Location", self.path + "/")
				self.end_headers()
				return (None, 0, 0)
			for index in "index.html", "index.htm":
				index = os.path.join(path, index)
				if os.path.exists(index):
					path = index
					break
			else:
				self.send_error(404, "No permission to list directory")
				return (None, 0, 0)
		ctype = self.guess_type(path)
		try:
			f = open(path, 'rb')
		except IOError:
			self.send_error(404, "File not found")
			return (None, 0, 0)
		if "Range" in self.headers:
			self.send_response(206)
		else:
			self.send_response(200)
		self.send_header("Content-type", ctype)
		fs = os.fstat(f.fileno())
		size = int(fs[6])
		start_range = 0
		end_range = size
		self.send_header("Accept-Ranges", "bytes")
		if "Range" in self.headers:
			s, e = self.headers['range'][6:].split('-', 1)
			sl = len(s)
			el = len(e)
			if sl > 0:
				start_range = int(s)
				if el > 0:
					end_range = int(e) + 1
			elif el > 0:
				ei = int(e)
				if ei < size:
					start_range = size - ei
		self.send_header("Content-Range", 'bytes ' + str(start_range) + '-' + str(end_range - 1) + '/' + str(size))
		self.send_header("Content-Length", end_range - start_range)
		self.send_header("Last-Modified", self.date_time_string(fs.st_mtime))
		self.end_headers()
		return (f, start_range, end_range)

def webserv():
	global port
	port = random.randint(4000, 4999)
	server_address = ('127.0.0.1', port)
	if base_mode == "yes":
		httpd = BaseHTTPServer.HTTPServer(server_address, SimpleHTTPRequestHandler)
		print "Starting in Basic Mode..."
	else:
		httpd = BaseHTTPServer.HTTPServer(server_address, RequestHandler)
	httpd.serve_forever()


class WSEClient():
	def get_width(self):
		self.width = None
		self.gamepath = read_settings("Directory")
		self.file = open(self.gamepath+"/game.xml")
		for self.line in self.file.readlines():
			if "<stage" in self.line:
				for self.data in self.line.split():
					if "width" in self.data:
						self.width = str(self.data.split("=")[1]).strip('"')
						break
				break
		if self.width: return int(self.width.strip("px"))

	def get_height(self):
		self.height = None
		self.gamepath = read_settings("Directory")
		self.file = open(self.gamepath+"/game.xml")
		for self.line in self.file.readlines():
			if "<stage" in self.line:
				for self.data in self.line.split():
					if "height" in self.data:
						self.height = str(self.data.split("=")[1]).strip('"')
						break
				break
		if self.height: return int(self.height.strip("px"))
	
	def window_state(self, window, event):
		global fullscreen
		if event.changed_mask & gtk.gdk.WINDOW_STATE_FULLSCREEN:
			if event.new_window_state & gtk.gdk.WINDOW_STATE_FULLSCREEN:
				fullscreen = True
				write_settings("DisplayMode", "fullscreen")
			else:
				fullscreen = False
				write_settings("DisplayMode", "windowed")

		if event.changed_mask & gtk.gdk.WINDOW_STATE_MAXIMIZED:
			if event.new_window_state & gtk.gdk.WINDOW_STATE_MAXIMIZED:
				write_settings("DisplayMode", "maximized")
			else: write_settings("DisplayMode", "windowed")
	
	def fullscreen(self, window, event, key=gtk.keysyms.F11):
		global fullscreen
		if event.keyval == key:
			if fullscreen: 
				window.unfullscreen()
			else: 
				window.fullscreen()

	def delete_event(self, widget, event, data=None):
		return False

	def quit(self, widget, data=None):
		gtk.main_quit()

	def __init__(self):
		global fullscreen

		fullscreen = False
		
		# Load up some variables
		self.width = self.get_width()
		self.height = self.get_height()
		self.displaymode = read_settings("DisplayMode").lower()

		# Initial Window Settings
		self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
		self.window.set_title(read_settings("Title"))
		self.window.set_default_size(self.width, self.height)
		self.window.set_size_request(self.width, self.height)
		self.window.set_resizable(True)
		self.window.set_position(gtk.WIN_POS_CENTER)
		if self.displaymode == "maximized":
			self.window.maximize()
		if self.displaymode == "fullscreen":
			self.window.fullscreen()
			fullscreen = True

		# Handles the events
		self.window.connect("delete_event", self.delete_event)
		self.window.connect("destroy", self.quit)
		self.window.connect("window-state-event", self.window_state)
		self.window.connect("key-press-event", self.fullscreen)

		# Add in webkit features
		self.webview = webkit.WebView()
		self.gamepath = read_settings("Directory")

		# Nice Reference to this: http://webkitgtk.org/reference/webkitgtk/stable/WebKitWebSettings.html
		self.settings = self.webview.get_settings()
		self.settings.set_property("enable-page-cache", 1)
		self.settings.set_property("enable-html5-database", 1)
		self.settings.set_property("enable-html5-local-storage", 1)
		self.settings.set_property("enable-offline-web-application-cache", 1)
		self.settings.set_property("enable-file-access-from-file-uris", 1)
		self.settings.set_property("enable_default_context_menu", 0) # Disables the Right click menu
		self.webview.open("http://127.0.0.1:"+str(port)+"/"+self.gamepath+"/")

		# Add Scrollbars as needed
		self.scrolled_window = gtk.ScrolledWindow(None, None)
		self.scrolled_window.add(self.webview)
		self.box = gtk.VBox(False, 0)
		self.box.add(self.scrolled_window)

		self.window.add(self.box)
		self.window.show_all()

	def main(self):
   		gtk.main()


if __name__=="__main__":
	httpd = Thread(target=webserv)
	httpd.daemon = True
	httpd.start()
	wse=WSEClient()
	wse.main()